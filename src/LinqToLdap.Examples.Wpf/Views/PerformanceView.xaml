<UserControl x:Class="LinqToLdap.Examples.Wpf.Views.PerformanceView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="800">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0" Margin="5">
            <TextBlock Style="{StaticResource Header}">Connection Factory Comparisons</TextBlock>
            <TextBlock TextWrapping="WrapWithOverflow">
                The section below will test the performance benefit of using the pooled connection factory vs. a standard connection factory.
                The most expensive part of the query process is usually the initial authentication bind.  
                By reusing connections you can bypass that process, thus improving overall performance and scalability.  
                DirectoryEntry performance is also tested here since it has the ability to reuse connections under certain conditions.  
                See the ConnectionFactoryCompareWork method in /ViewModels/PerformanceViewModel.cs for code.
            </TextBlock>
        </StackPanel>
        <StackPanel Orientation="Vertical" Grid.Row="1">
            <Button Command="{Binding ConnectionPoolCommand}">Go!</Button>
            <TextBox Text="{Binding FactoryRunText, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" Height="150" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible"></TextBox>
        </StackPanel>

        <StackPanel Grid.Row="2" Margin="5" Visibility="Collapsed">
            <TextBlock Style="{StaticResource Header}">DirectoryEntry vs. LINQ to LDAP vs. Raw S.DS.P</TextBlock>
            <TextBlock TextWrapping="WrapWithOverflow">
                The section below will test the performance of using a DirectoryEntry, LINQ to LDAP, and raw S.DS.P.
                See the DirectoryEntryCompareWork method in /ViewModels/PerformanceViewModel.cs for code.
            </TextBlock>
        </StackPanel>
        <StackPanel Orientation="Vertical" Grid.Row="3" Visibility="Collapsed">
            <Button Command="{Binding DirectoryEntryCommand}">Go!</Button>
            <TextBox Text="{Binding DirectoryEntryRunText, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" Height="150" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible"></TextBox>
        </StackPanel>
    </Grid>
</UserControl>
